# стадии нашего pipeline. Для группировки jobs.
# Нужно помнить, что stages выполняются последовательно, а job параллельно.
stages:
  # укажем одну стадию с именем test
  - test
  - build
  - deploy

# укажем нужный Docker образ глобально
image: node:14.17.0-alpine

# определим кеширование
cache:
  # ключ кеширования
  key:
    # файл или файлы
    files:
      # наш lock-файл с зависимостями
      - package-lock.json
  # что кешировать
  paths:
    - .npm/

# определим новую секцию для подготовки кеша
before_script:
  - npm ci --cache .npm --prefer-offline

# создадим job с именем eslint
eslint:
  # добавим ее в стадию test
  stage: test
  needs: []
  # секция script описывает шаги
  script:
    # запуск ESLint
   - npm run lint

prettier:
  stage: test
  allow_failure: true
  script:
    - npm run check:format # npx prettier --single-quote --write .

tsc:
  stage: test
  needs: []
  script:
    - npm run check:types

build:
  stage: build
  variables:
    NEXT_PUBLIC_HOST: http://$SSH_HOST
    NEXT_PUBLIC_FRONTEND_VERSION: "${CI_COMMIT_SHORT_SHA}"
  script:
    - npm run build
  artifacts:
    paths:
      - .next/
    expire_in: 1 week

deploy:
  stage: deploy
#  variables:
#    BACKEND_VERSION: $CI_COMMIT_SHORT_SHA
  script:
      - apk --update add openssh-client
      - eval $(ssh-agent -s)
      - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
      - mkdir -p ~/.ssh
      - chmod 700 ~/.ssh
      - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
      - scp -r ./.next package.json nexus.tsconfig.json next.config.js prisma $SSH_USER@$SSH_HOST:~/graphql-blog-demo/
      - ssh $SSH_USER@$SSH_HOST "cd ~/graphql-blog-demo && npm install --production && cd .. && BACKEND_VERSION=$CI_COMMIT_SHORT_SHA pm2 restart all --update-env"
  needs: ['build']
